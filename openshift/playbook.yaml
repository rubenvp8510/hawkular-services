#
# Copyright 2016-2017 Red Hat, Inc. and/or its affiliates
# and other contributors as indicated by the @author tags.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

---
- name: Install Hawkular Services into openshift
  hosts: localhost
  vars_files:
    - hawkular-services-ansible-vars.yaml
  tasks:
    - name: "Flush iptables rules. Because of DNS we need to run: sudo iptables -F"
      become: yes
      become_method: sudo
      shell: "iptables -F"
      when: "flush_ip_tables"

    - name: Install the libselinux-python package
      become: yes
      become_method: sudo
      package:
        name: libselinux-python
        state: present

    - name: Create directories that will be used as persistent volumes
      become: yes
      become_method: sudo
      file:
        path: /tmp/pv-{{ item }}
        state: directory
        mode: "g=rwx"
        group: "root"
        setype: svirt_sandbox_file_t
        recurse: yes
      with_items:
        - cassandra
        - services

    #check if the oc command is available
    - name: "Find out if the oc command is available"
      shell: "oc &> /dev/null"
      ignore_errors: yes
      register: oc_command_result

    # this installs the oc in version 1.3.1 if oc command is not present
    - name: Install the origin-clients package
      become: yes
      become_method: sudo
      when: "oc_command_result.rc != 0"
      package:
        name: origin-clients
        state: present

    - name: "Find out what oc client version we are running (major version)"
      shell: "oc version | grep oc | cut -f2 -d' ' | cut -c2"
      register: oc_major_version

    - name: "Find out what oc client version we are running (minor version)"
      shell: "oc version | grep oc | cut -f2 -d' ' | cut -f2 -d'.'"
      register: oc_minor_version

    - name: "Find out what oc client version we are running"
      shell: "echo true"
      when: "oc_major_version.stdout|int <= 1 and oc_minor_version.stdout|int < 5"
      register: oc_client_before_15

    - name: Create OpenShift Cluster (make sure you have the insecure-registry added)
      shell: "oc cluster up --version={{ openshift_cluster_version }} --metrics={{ openshift_use_metrics }}"
      register: command_result
      when: "create_openshift_cluster"
      failed_when: "'OpenShift is already running' not in command_result.stdout and command_result.rc != 0"

    - name: Create a new OpenShift project
      shell: "oc new-project {{ project_name }}"
      register: command_result
      failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
      changed_when: "'exists' not in command_result.stderr"

    - name: Log in as system:admin
      shell: "oc login -u system:admin"

      # using the old syntax
    - name: Add two Persistent Volumes (old api)
      shell: >
        oc process -f ./pvs.yaml
        -v HAWKULAR_SERVICES_DATA_LIMIT={{ hawkular_services_data_limit }} CASSANDRA_DATA_LIMIT={{ cassandra_data_limit }}
        | oc create -f -
      register: command_result
      when: oc_client_before_15 is defined and not oc_client_before_15|skipped and oc_client_before_15.stdout
      failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
      changed_when: "'exists' not in command_result.stderr"

      # using the new syntax
    - name: Add two Persistent Volumes (new api)
      shell: >
        oc process -f ./pvs.yaml
        --param HAWKULAR_SERVICES_DATA_LIMIT={{ hawkular_services_data_limit }}
        --param CASSANDRA_DATA_LIMIT={{ cassandra_data_limit }}
        | oc create -f -
      register: command_result
      when: oc_client_before_15.stdout is not defined
      failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
      changed_when: "'exists' not in command_result.stderr"

    - name: Log in as developer
      shell: "oc login -u developer -p developer"

      # using the old syntax
    - name: Install Hawkular Services (old api)
      shell: >
        oc process -f ./hawkular-services-persistent.yaml
        -v HAWKULAR_SERVICES_IMAGE={{ hawkular_services_image }}
        CASSANDRA_IMAGE={{ cassandra_image }}
        ROUTE_HOSTNAME={{ route_hostname }}
        `[ -z "{{ hawkular_user }}" ] || echo "HAWKULAR_USER={{ hawkular_user }}"` \
        `[ -z "{{ hawkular_password }}" ] || echo "HAWKULAR_PASSWORD={{ hawkular_password }}"` \
        ROUTE_NAME={{ route_name }}
        | oc create -f -
      register: command_result
      when: oc_client_before_15 is defined and not oc_client_before_15|skipped and oc_client_before_15.stdout
      failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
      changed_when: "'exists' not in command_result.stderr"

      # using the new syntax
    - name: Install Hawkular Services (new api)
      shell: >
        oc process -f ./hawkular-services-persistent.yaml
        --param HAWKULAR_SERVICES_IMAGE={{ hawkular_services_image }}
        --param CASSANDRA_IMAGE={{ cassandra_image }}
        --param ROUTE_HOSTNAME={{ route_hostname }}
        `[ -z "{{ hawkular_user }}" ] || echo "--param HAWKULAR_USER={{ hawkular_user }}"` \
        `[ -z "{{ hawkular_password }}" ] || echo "--param HAWKULAR_PASSWORD={{ hawkular_password }}"` \
        --param ROUTE_NAME={{ route_name }}
        | oc create -f -
      register: command_result
      when: oc_client_before_15.stdout is not defined
      failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
      changed_when: "'exists' not in command_result.stderr"

    - name: Get the hawkular-services address
      shell: "oc get route {{ route_name }} | grep {{ route_name }} | awk '{print $2}'"
      register: hawkular_services_address

    - name: Get the hawkular-services username
      shell: oc env dc/hawkular-services --list | grep HAWKULAR_USER | cut -f2 -d'='
      register: real_hawkular_user

    - name: Get the hawkular-services password
      shell: oc env dc/hawkular-services --list | grep HAWKULAR_PASSWORD | cut -f2 -d'='
      register: real_hawkular_password

    - name: Print out the hawkular-services address
      debug:
        msg:
          - "The hostname for the Hawkular Services service is: http://{{ hawkular_services_address.stdout }}"
          - "Username: {{ real_hawkular_user.stdout }}"
          - "Password: {{ real_hawkular_password.stdout }}"
          - "It may take a minute or two to spin the containers. Especially if it is pulling the images."
          - "Consider running   watch oc get pod -l name=hawkular-services    ..to find out when it is ready."
